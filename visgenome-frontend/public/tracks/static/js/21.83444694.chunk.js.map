{"version":3,"sources":["../../../plugins/spreadsheet-view/src/SpreadsheetView/importAdapters/VcfImport.ts","../../../plugins/spreadsheet-view/src/SpreadsheetView/importAdapters/ImportUtils.ts","../../../node_modules/@gmod/vcf/dist/index.js","../../../node_modules/@gmod/vcf/dist/parse.js","../../../node_modules/@gmod/vcf/dist/vcfReserved.js"],"names":["vcfCoreColumns","name","type","vcfRecordToRow","vcfParser","line","lineNumber","vcfVariant","parseLine","vcfFeature","VcfFeature","variant","parser","id","data","split","map","d","length","push","String","extendedData","toJSON","cells","text","columnNumber","parseVcfBuffer","buffer","options","hasColumnNameLine","columnNameLineNumber","isValidRefName","splitVcfFileHeaderAndBody","bufferToString","header","body","rows","VCF","forEach","test","rowSet","isLoaded","columnDisplayOrder","columns","i","dataType","samples","oi","unshift","isDerived","derivationFunctionText","hasColumnNames","assemblyName","selectedAssemblyName","wholeFile","prevChar","headerEndIndex","c","substr","TextDecoder","fatal","decode","parseWith","csv","noheader","output","fromString","guessColumnType","parsedLoc","guessedType","parseLocString","error","refName","start","dataToSpreadsheetSnapshot","maxCols","row","rowNumber","columnNames","undefined","splice","colNamesRow","cell","parseCsvBuffer","a","parseTsvBuffer","delimiter","require","module","exports","_interopRequireDefault","_slicedToArray2","_classCallCheck2","_createClass2","_vcfReserved","Breakend","default","this","key","value","char","MateDirection","Join","concat","MatePosition","Replacement","args","_this","Error","headerLines","filter","strict","metadata","JSON","parse","stringify","INFO","InfoFields","FORMAT","GenotypeFields","ALT","AltTypes","FILTER","FilterTypes","startsWith","_parseMetadata","fields","thisHeader","slice","correctHeader","every","index","_line$trim$match$slic","trim","match","_line$trim$match$slic2","metaKey","metaVal","_this$_parseStructure","_parseStructuredMetaVal","_this$_parseStructure2","keyVals","_parseKeyValue","replace","ID","Number","isNaN","filteredMetadata","_len","arguments","Array","_key","str","pairSeparator","currKey","currValue","state","_this2","currChar","currField","rest","CHROM","POS","REF","QUAL","parseFloat","info","Object","keys","items","val","itemType","getMetadata","console","warn","SVTYPE","_parseBreakend","bind","that","defineProperty","Variant","prototype","get","_parseGenotypes","stuff","assign","breakendString","tokens","parsed","includes","tok","formatKeys","_this3","genotypes","sample","formatValue","formatIndex","thisValue","valueType","AA","Type","Description","AC","AD","ADF","ADR","AF","AN","BQ","CIGAR","DB","DP","END","H2","H3","MQ","MQ0","NS","SB","SOMATIC","VALIDATED","IMPRECISE","NOVEL","SVLEN","CIPOS","CIEND","HOMLEN","HOMSEQ","BKPTID","MEINFO","METRANS","DGVID","DBVARID","DBRIPID","MATEID","PARID","EVENT","CILEN","DPADJ","CN","CNADJ","CICN","CICNADJ","EC","FT","GL","GP","GQ","GT","HQ","PL","PQ","PS","DEL","INS","DUP","INV","CNV","NON_REF","PASS"],"mappings":"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","file":"static/js/21.83444694.chunk.js","sourcesContent":["import VCF from '@gmod/vcf'\nimport { VcfFeature } from '@jbrowse/plugin-variants'\nimport {\n  bufferToString,\n  Row,\n  RowSet,\n  Column,\n  ParseOptions,\n} from './ImportUtils'\n\nconst vcfCoreColumns: { name: string; type: string }[] = [\n  { name: 'CHROM', type: 'Text' }, // 0\n  { name: 'POS', type: 'Number' }, // 1\n  { name: 'ID', type: 'Text' }, // 2\n  { name: 'REF', type: 'Text' }, // 3\n  { name: 'ALT', type: 'Text' }, // 4\n  { name: 'QUAL', type: 'Number' }, // 5\n  { name: 'FILTER', type: 'Text' }, // 6\n  { name: 'INFO', type: 'Text' }, // 7\n  { name: 'FORMAT', type: 'Text' }, // 8\n]\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction vcfRecordToRow(vcfParser: any, line: string, lineNumber: number): Row {\n  const vcfVariant = vcfParser.parseLine(line)\n  const vcfFeature = new VcfFeature({\n    variant: vcfVariant,\n    parser: vcfParser,\n    id: `vcf-${lineNumber}`,\n  })\n\n  const data = line.split('\\t').map(d => (d === '.' ? '' : d))\n  // no format column, add blank\n  if (data.length === 8) {\n    data.push('')\n  }\n  const row: Row = {\n    id: String(lineNumber + 1),\n    extendedData: { vcfFeature: vcfFeature.toJSON() },\n    cells: data.map((text, columnNumber) => {\n      return {\n        columnNumber,\n        text,\n      }\n    }),\n  }\n  return row\n}\n\nexport function parseVcfBuffer(\n  buffer: Buffer,\n  options: ParseOptions = {\n    hasColumnNameLine: false,\n    columnNameLineNumber: 0,\n    isValidRefName: () => false,\n  },\n) {\n  let { header, body } = splitVcfFileHeaderAndBody(bufferToString(buffer))\n  const rows: Row[] = []\n  const vcfParser = new VCF({ header })\n  header = '' // garbage collect\n  body.split('\\n').forEach((line: string, lineNumber) => {\n    if (/\\S/.test(line)) {\n      rows.push(vcfRecordToRow(vcfParser, line, lineNumber))\n    }\n  })\n  body = '' // garbage collect\n\n  const rowSet: RowSet = {\n    isLoaded: true,\n    rows,\n  }\n\n  const columnDisplayOrder: number[] = []\n  const columns: Column[] = []\n  for (let i = 0; i < vcfCoreColumns.length; i += 1) {\n    columnDisplayOrder.push(i)\n    columns[i] = {\n      name: vcfCoreColumns[i].name,\n      dataType: { type: vcfCoreColumns[i].type },\n    }\n  }\n  for (let i = 0; i < vcfParser.samples.length; i += 1) {\n    const oi = vcfCoreColumns.length + i\n    columnDisplayOrder.push(oi)\n    columns[oi] = { name: vcfParser.samples[i], dataType: { type: 'Text' } }\n  }\n\n  columnDisplayOrder.push(columnDisplayOrder.length)\n  columns.unshift({\n    name: 'Location',\n    dataType: { type: 'LocString' },\n    isDerived: true,\n    derivationFunctionText: `jexl:{text:row.extendedData.vcfFeature.refName+':'\\n\n    +row.extendedData.vcfFeature.start+'..'+row.extendedData.vcfFeature.end, extendedData:\\n\n    {refName:row.extendedData.vcfFeature.refName,start:row.extendedData.vcfFeature.start,end:row.extendedData.vcfFeature.end}}`,\n  })\n\n  return {\n    rowSet,\n    columnDisplayOrder,\n    hasColumnNames: true,\n    columns,\n    assemblyName: options.selectedAssemblyName,\n  }\n}\n\nexport function splitVcfFileHeaderAndBody(wholeFile: string) {\n  // split into header and the rest of the file\n  let headerEndIndex = 0\n  let prevChar\n  for (; headerEndIndex < wholeFile.length; headerEndIndex += 1) {\n    const c = wholeFile[headerEndIndex]\n    if (prevChar === '\\n' && c !== '#') {\n      break\n    }\n    prevChar = c\n  }\n\n  return {\n    header: wholeFile.substr(0, headerEndIndex),\n    body: wholeFile.substr(headerEndIndex),\n  }\n}\n","import csv from 'csvtojson'\n\nimport { parseLocString } from '@jbrowse/core/util'\n\nexport function bufferToString(buffer: Buffer) {\n  return new TextDecoder('utf-8', { fatal: true }).decode(buffer)\n}\n\nfunction parseWith(buffer: Buffer, options = {}) {\n  return csv({ noheader: true, output: 'csv', ...options }).fromString(\n    bufferToString(buffer),\n  )\n}\n\nexport interface Row {\n  id: string\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  extendedData?: any\n  cells: {\n    text: string\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    extendedData?: any\n  }[]\n}\n\nexport interface RowSet {\n  isLoaded: boolean\n  rows: Row[]\n}\n\nexport interface ParseOptions {\n  hasColumnNameLine?: boolean\n  columnNameLineNumber?: number\n  selectedAssemblyName?: string\n  isValidRefName: (refName: string, assemblyName?: string) => boolean\n}\n\nexport interface Column {\n  name: string\n  dataType: { type: string }\n  isDerived?: boolean\n  derivationFunctionText?: string\n}\n\nfunction guessColumnType(\n  rowSet: RowSet,\n  columnNumber: number,\n  isValidRefName: (refName: string, assemblyName?: string) => boolean,\n) {\n  const text = rowSet.rows[0].cells[columnNumber].text || ''\n\n  let guessedType = 'Text'\n\n  let parsedLoc\n  try {\n    parsedLoc = parseLocString(text, isValidRefName)\n  } catch (error) {\n    //\n  }\n  if (parsedLoc && parsedLoc.refName && typeof parsedLoc.start === 'number') {\n    guessedType = 'LocString'\n  } else if (/^\\d+(\\.\\d+)?$/.test(text)) {\n    guessedType = 'Number'\n  }\n\n  // MAYBE TODO: iterate over the rest of the rows to confirm\n  // the type for all the rows\n\n  return guessedType\n}\n\nfunction dataToSpreadsheetSnapshot(\n  rows: string[][],\n  options: ParseOptions = {\n    hasColumnNameLine: false,\n    columnNameLineNumber: 1,\n    isValidRefName: () => false,\n  },\n) {\n  // rows is an array of row objects and columnNames\n  // is an array of column names (in import order)\n  let maxCols = 0\n  const rowSet: RowSet = {\n    isLoaded: true,\n    rows: rows.map((row, rowNumber) => {\n      const id = rowNumber + (options.hasColumnNameLine ? 0 : 1)\n      if (row.length > maxCols) {\n        maxCols = row.length\n      }\n      return {\n        id: String(id),\n        cells: row.map((text, columnNumber) => {\n          return { columnNumber, text }\n        }),\n      }\n    }),\n  }\n\n  // process the column names row if present\n  const columnNames: Record<string, string> = {}\n  if (options.hasColumnNameLine && options.columnNameLineNumber !== undefined) {\n    const [colNamesRow] = rowSet.rows.splice(\n      options.columnNameLineNumber - 1,\n      1,\n    )\n\n    if (colNamesRow) {\n      colNamesRow.cells.forEach((cell, columnNumber) => {\n        columnNames[columnNumber] = cell.text || ''\n      })\n    }\n  }\n\n  // make our column definitions\n  const columns: Column[] = []\n  const columnDisplayOrder = []\n  for (let columnNumber = 0; columnNumber < maxCols; columnNumber += 1) {\n    columnDisplayOrder.push(columnNumber)\n    const guessedType = guessColumnType(\n      rowSet,\n      columnNumber,\n      options.isValidRefName,\n    )\n\n    // store extendeddata for LocString column\n    if (guessedType === 'LocString') {\n      rowSet.rows.forEach(row => {\n        const cell = row.cells[columnNumber]\n        cell.extendedData = parseLocString(cell.text, options.isValidRefName)\n      })\n    }\n\n    columns[columnNumber] = {\n      name: columnNames[columnNumber],\n      dataType: {\n        type: guessedType,\n      },\n    }\n  }\n\n  return {\n    rowSet,\n    columnDisplayOrder,\n    hasColumnNames: !!options.hasColumnNameLine,\n    columns,\n    assemblyName: options.selectedAssemblyName,\n  }\n}\n\nexport async function parseCsvBuffer(\n  buffer: Buffer,\n  options: ParseOptions = {\n    hasColumnNameLine: false,\n    columnNameLineNumber: 1,\n    isValidRefName: () => false,\n  },\n) {\n  const rows = await parseWith(buffer)\n  return dataToSpreadsheetSnapshot(rows, options)\n}\n\nexport async function parseTsvBuffer(\n  buffer: Buffer,\n  options: ParseOptions = {\n    hasColumnNameLine: false,\n    columnNameLineNumber: 1,\n    isValidRefName: () => false,\n  },\n) {\n  const rows = await parseWith(buffer, { delimiter: '\\t' })\n  return dataToSpreadsheetSnapshot(rows, options)\n}\n","\"use strict\"; /** @module VCF */\nvar VCF = require('./parse');\n\nmodule.exports = VCF;","\"use strict\";var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");var _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));var _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _vcfReserved = _interopRequireDefault(require(\"./vcfReserved\"));var\n\nBreakend = /*#__PURE__*/function () {function Breakend() {(0, _classCallCheck2.default)(this, Breakend);}(0, _createClass2.default)(Breakend, [{ key: \"toString\", value: function toString()\n    {\n      var char = this.MateDirection === 'left' ? ']' : '[';\n      if (this.Join === 'left') {\n        return \"\".concat(char).concat(this.MatePosition).concat(char).concat(this.Replacement);\n      }\n      return \"\".concat(this.Replacement).concat(char).concat(this.MatePosition).concat(char);\n    } }]);return Breakend;}();\n\n\n/**\n                                * Class representing a VCF parser, instantiated with the VCF header.\n                                * @param {object} args\n                                * @param {string} args.header - The VCF header. Supports both LF and CRLF\n                                * newlines.\n                                * @param {boolean} args.strict - Whether to parse in strict mode or not (default true)\n                                */var\nVCF = /*#__PURE__*/function () {\n  function VCF(args) {var _this = this;(0, _classCallCheck2.default)(this, VCF);\n    if (!args || !args.header || !args.header.length) {\n      throw new Error('empty header received');\n    }\n    var headerLines = args.header.split(/[\\r\\n]+/).filter(function (line) {return line;});\n    if (!headerLines.length) {\n      throw new Error('no non-empty header lines specified');\n    }\n\n    // allow access to the Breakend class in case anybody wants to use it for checking\n    this.Breakend = Breakend;\n    this.strict = args.strict !== undefined ? args.strict : true; // true by default\n    this.metadata = JSON.parse(\n    JSON.stringify({\n      INFO: _vcfReserved.default.InfoFields,\n      FORMAT: _vcfReserved.default.GenotypeFields,\n      ALT: _vcfReserved.default.AltTypes,\n      FILTER: _vcfReserved.default.FilterTypes }));\n\n\n    headerLines.forEach(function (line) {\n      if (!line.startsWith('#')) {\n        throw new Error(\"Bad line in header:\\n\".concat(line));\n      }\n      if (line.startsWith('##')) {\n        _this._parseMetadata(line);\n      } else if (line) {\n        var fields = line.split('\\t');\n        var thisHeader = fields.slice(0, 8);\n        var correctHeader = [\n        '#CHROM',\n        'POS',\n        'ID',\n        'REF',\n        'ALT',\n        'QUAL',\n        'FILTER',\n        'INFO'];\n\n        if (fields.length < 8) {\n          throw new Error(\"VCF header missing columns:\\n\".concat(line));\n        } else if (fields.length === 9) {\n          throw new Error(\"VCF header has FORMAT but no samples:\\n\".concat(line));\n        } else if (\n        thisHeader.length !== correctHeader.length ||\n        !thisHeader.every(function (value, index) {return value === correctHeader[index];}))\n        {\n          throw new Error(\"VCF column headers not correct:\\n\".concat(line));\n        }\n        _this.samples = fields.slice(9);\n      }\n    });\n    if (!this.samples) throw new Error('VCF does not have a header line');\n  }\n\n  /**\n     * Parse a VCF metadata line (i.e. a line that starts with \"##\") and add its\n     * properties to the object.\n     * @param {string} line - A line from the VCF. Supports both LF and CRLF\n     * newlines.\n     */(0, _createClass2.default)(VCF, [{ key: \"_parseMetadata\", value: function _parseMetadata(\n    line) {var _line$trim$match$slic =\n      line.\n      trim().\n      match(/^##(.+?)=(.*)/).\n      slice(1, 3),_line$trim$match$slic2 = (0, _slicedToArray2.default)(_line$trim$match$slic, 2),metaKey = _line$trim$match$slic2[0],metaVal = _line$trim$match$slic2[1];\n      if (metaVal.startsWith('<')) {\n        if (!(metaKey in this.metadata)) {\n          this.metadata[metaKey] = {};\n        }var _this$_parseStructure =\n        this._parseStructuredMetaVal(metaVal),_this$_parseStructure2 = (0, _slicedToArray2.default)(_this$_parseStructure, 2),id = _this$_parseStructure2[0],keyVals = _this$_parseStructure2[1];\n        this.metadata[metaKey][id] = keyVals;\n      } else {\n        this.metadata[metaKey] = metaVal;\n      }\n    }\n\n    /**\n       * Parse a VCF header structured meta string (i.e. a meta value that starts\n       * with \"<ID=...\")\n       * @param {string} metaVal - The VCF metadata value\n       *\n       * @returns {Array} - Array with two entries, 1) a string of the metadata ID\n       * and 2) an object with the other key-value pairs in the metadata\n       */ }, { key: \"_parseStructuredMetaVal\", value: function _parseStructuredMetaVal(\n    metaVal) {\n      var keyVals = this._parseKeyValue(metaVal.replace(/^<|>$/g, ''), ',');\n      var id = keyVals.ID;\n      delete keyVals.ID;\n      if ('Number' in keyVals) {\n        if (!Number.isNaN(Number(keyVals.Number))) {\n          keyVals.Number = Number(keyVals.Number);\n        }\n      }\n      return [id, keyVals];\n    }\n\n    /**\n       * Get metadata filtered by the elements in args. For example, can pass\n       * ('INFO', 'DP') to only get info on an metadata tag that was like\n       * \"##INFO=<ID=DP,...>\"\n       * @param  {...string} args - List of metadata filter strings.\n       *\n       * @returns {any} An object, string, or number, depending on the filtering\n       */ }, { key: \"getMetadata\", value: function getMetadata()\n    {\n      var filteredMetadata = this.metadata;for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}\n      for (var i = 0; i < args.length; i += 1) {\n        filteredMetadata = filteredMetadata[args[i]];\n        if (!filteredMetadata) return filteredMetadata;\n      }\n      return filteredMetadata;\n    }\n\n    /**\n       * Sometimes VCFs have key-value strings that allow the separator within\n       * the value if it's in quotes, like:\n       * 'ID=DB,Number=0,Type=Flag,Description=\"dbSNP membership, build 129\"'\n       *\n       * Parse this at a low level since we can't just split at \",\" (or whatever\n       * separator). Above line would be parsed to:\n       * {ID: 'DB', Number: '0', Type: 'Flag', Description: 'dbSNP membership, build 129'}\n       * @param {string} str - Key-value pairs in a string\n       * @param {string} [pairSeparator] - A string that separates sets of key-value\n       * pairs\n       *\n       * @returns {object} An object containing the key-value pairs\n       */ }, { key: \"_parseKeyValue\", value: function _parseKeyValue(\n    str) {var pairSeparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ';';\n      var data = {};\n      var currKey = '';\n      var currValue = '';\n      var state = 1; // states: 1: read key to = or pair sep, 2: read value to sep or quote, 3: read value to quote\n      for (var i = 0; i < str.length; i += 1) {\n        if (state === 1) {\n          // read key to = or pair sep\n          if (str[i] === '=') {\n            state = 2;\n          } else if (str[i] !== pairSeparator) {\n            currKey += str[i];\n          } else if (currValue === '') {\n            data[currKey] = null;\n            currKey = '';\n          }\n        } else if (state === 2) {\n          // read value to pair sep or quote\n          if (str[i] === pairSeparator) {\n            data[currKey] = currValue;\n            currKey = '';\n            currValue = '';\n            state = 1;\n          } else if (str[i] === '\"') {\n            state = 3;\n          } else currValue += str[i];\n        } else if (state === 3) {\n          // read value to quote\n          if (str[i] !== '\"') currValue += str[i];else\n          state = 2;\n        }\n      }\n      if (state === 2 || state === 3) {\n        data[currKey] = currValue;\n      } else if (state === 1) {\n        data[currKey] = null;\n      }\n      return data;\n    }\n\n    /**\n       * Parse a VCF line into an object like { CHROM POS ID REF ALT QUAL FILTER\n       * INFO } with SAMPLES optionally included if present in the VCF\n       * @param {string} line - A string of a line from a VCF. Supports both LF and\n       * CRLF newlines.\n       */ }, { key: \"parseLine\", value: function parseLine(\n    line) {var _this2 = this;\n      // eslint-disable-next-line no-param-reassign\n      line = line.trim();\n      if (!line.length) return undefined;\n      var currChar = 0;\n      for (var currField = 0; currChar < line.length; currChar += 1) {\n        if (line[currChar] === '\\t') {\n          currField += 1;\n        }\n        if (currField === 9) {\n          // reached genotypes, rest of fields are evaluated lazily\n          break;\n        }\n      }\n      var fields = line.substr(0, currChar).split('\\t');\n      var rest = line.substr(currChar + 1);\n      var variant = {\n        CHROM: fields[0],\n        POS: Number(fields[1]),\n        ID: fields[2] === '.' ? null : fields[2].split(';'),\n        REF: fields[3],\n        ALT: fields[4] === '.' ? null : fields[4].split(','),\n        QUAL: fields[5] === '.' ? null : parseFloat(fields[5]) };\n\n      if (fields[6] === '.') {\n        variant.FILTER = null;\n      } else if (fields[6] === 'PASS') {\n        variant.FILTER = 'PASS';\n      } else {\n        variant.FILTER = fields[6].split(';');\n      }\n      if (this.strict && fields[7] === undefined) {\n        throw new Error(\n        \"no INFO field specified, must contain at least a '.' (turn off strict mode to allow)\");\n\n      }\n      var info =\n      fields[7] === undefined || fields[7] === '.' ?\n      {} :\n      this._parseKeyValue(fields[7]);\n      Object.keys(info).forEach(function (key) {\n        var items;\n        if (info[key]) {\n          items = info[key].split(',');\n          items = items.map(function (val) {return val === '.' ? null : val;});\n        } else items = info[key];\n        var itemType = _this2.getMetadata('INFO', key, 'Type');\n        if (itemType) {\n          if (itemType === 'Integer' || itemType === 'Float') {\n            items = items.map(function (val) {\n              if (val === null) return null;\n              return Number(val);\n            });\n          } else if (itemType === 'Flag') {\n            if (info[key])\n              // eslint-disable-next-line no-console\n              console.warn(\"Info field \".concat(\n              key, \" is a Flag and should not have a value (got value \").concat(info[key], \")\"));else\n\n            items = true;\n          }\n        }\n        info[key] = items;\n      });\n      variant.INFO = info;\n\n      // if this has SVTYPE=BND, parse ALTS for breakend descriptions\n      if (variant.ALT && info && info.SVTYPE && info.SVTYPE[0] === 'BND') {\n        variant.ALT = variant.ALT.map(this._parseBreakend.bind(this));\n      }\n\n      // This creates a closure that allows us to attach \"SAMPLES\" as a lazy\n      // attribute\n\n      function Variant(stuff) {\n        Object.assign(this, stuff);\n      }\n\n      var that = this;\n\n      Object.defineProperty(Variant.prototype, 'SAMPLES', {\n        get: function get() {\n          var samples = that._parseGenotypes(fields[8], rest);\n\n          Object.defineProperty(this, 'SAMPLES', {\n            value: samples });\n\n\n          return samples;\n        } });\n\n\n      return new Variant(variant);\n    } }, { key: \"_parseBreakend\", value: function _parseBreakend(\n\n    breakendString) {\n      var tokens = breakendString.split(/[[\\]]/);\n      if (tokens.length > 1) {\n        var parsed = new Breakend();\n        parsed.MateDirection = breakendString.includes('[') ? 'right' : 'left';\n        for (var i = 0; i < tokens.length; i += 1) {\n          var tok = tokens[i];\n          if (tok) {\n            if (tok.includes(':')) {\n              // this is the remote location\n              parsed.MatePosition = tok;\n              parsed.Join = parsed.Replacement ? 'right' : 'left';\n            } else {\n              // this is the local alteration\n              parsed.Replacement = tok;\n            }\n          }\n        }\n        return parsed;\n      }\n      // if there is not more than one token, there are no [ or ] characters,\n      // so just return it unmodified\n      return breakendString;\n    } }, { key: \"_parseGenotypes\", value: function _parseGenotypes(\n\n    formatKeys, rest) {var _this3 = this;\n      // eslint-disable-next-line no-param-reassign\n      rest = rest.split('\\t');\n      var genotypes = {};\n      // eslint-disable-next-line no-param-reassign\n      formatKeys = formatKeys && formatKeys.split(':');\n      this.samples.forEach(function (sample, index) {\n        genotypes[sample] = {};\n        formatKeys.forEach(function (key) {\n          genotypes[sample][key] = null;\n        });\n        rest[index].split(':').forEach(function (formatValue, formatIndex) {\n          var thisValue;\n          if (\n          formatValue === '' ||\n          formatValue === '.' ||\n          formatValue === undefined)\n          {\n            thisValue = null;\n          } else {\n            thisValue = formatValue.\n            split(',').\n            map(function (val) {return val === '.' ? null : val;});\n            var valueType = _this3.getMetadata(\n            'FORMAT',\n            formatKeys[formatIndex],\n            'Type');\n\n            if ((valueType === 'Integer' || valueType === 'Float') && thisValue) {\n              thisValue = thisValue.map(function (val) {\n                if (!val) return null;\n                return Number(val);\n              });\n            }\n          }\n          genotypes[sample][formatKeys[formatIndex]] = thisValue;\n        }, {});\n      });\n      return genotypes;\n    } }]);return VCF;}();\n\n\nmodule.exports = VCF;","\"use strict\";Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = {\n  // INFO fields\n  InfoFields: {\n    // from the VCF4.3 spec, https://samtools.github.io/hts-specs/VCFv4.3.pdf\n    AA: { Number: 1, Type: 'String', Description: 'Ancestral allele' },\n    AC: {\n      Number: 'A',\n      Type: 'Integer',\n      Description:\n      'Allele count in genotypes, for each ALT allele, in the same order as listed' },\n\n    AD: {\n      Number: 'R',\n      Type: 'Integer',\n      Description: 'Total read depth for each allele' },\n\n    ADF: {\n      Number: 'R',\n      Type: 'Integer',\n      Description: 'Read depth for each allele on the forward strand' },\n\n    ADR: {\n      Number: 'R',\n      Type: 'Integer',\n      Description: 'Read depth for each allele on the reverse strand' },\n\n    AF: {\n      Number: 'A',\n      Type: 'Float',\n      Description:\n      'Allele frequency for each ALT allele in the same order as listed (estimated from primary data, not called genotypes)' },\n\n    AN: {\n      Number: 1,\n      Type: 'Integer',\n      Description: 'Total number of alleles in called genotypes' },\n\n    BQ: {\n      Number: 1,\n      Type: 'Float',\n      Description: 'RMS base quality' },\n\n    CIGAR: {\n      Number: 1,\n      Type: 'Float',\n      Description:\n      'Cigar string describing how to align an alternate allele to the reference allele' },\n\n    DB: {\n      Number: 0,\n      Type: 'Flag',\n      Description: 'dbSNP membership' },\n\n    DP: {\n      Number: 1,\n      Type: 'Integer',\n      Description: 'combined depth across samples' },\n\n    END: {\n      Number: 1,\n      Type: 'Integer',\n      Description: 'End position (for use with symbolic alleles)' },\n\n    H2: {\n      Number: 0,\n      Type: 'Flag',\n      Description: 'HapMap2 membership' },\n\n    H3: {\n      Number: 0,\n      Type: 'Flag',\n      Description: 'HapMap3 membership' },\n\n    MQ: {\n      Number: 1,\n      Type: null,\n      Description: 'RMS mapping quality' },\n\n    MQ0: {\n      Number: 1,\n      Type: 'Integer',\n      Description: 'Number of MAPQ == 0 reads' },\n\n    NS: {\n      Number: 1,\n      Type: 'Integer',\n      Description: 'Number of samples with data' },\n\n    SB: {\n      Number: 4,\n      Type: 'Integer',\n      Description: 'Strand bias' },\n\n    SOMATIC: {\n      Number: 0,\n      Type: 'Flag',\n      Description: 'Somatic mutation (for cancer genomics)' },\n\n    VALIDATED: {\n      Number: 0,\n      Type: 'Flag',\n      Description: 'Validated by follow-up experiment' },\n\n    '1000G': {\n      Number: 0,\n      Type: 'Flag',\n      Description: '1000 Genomes membership' },\n\n    // specifically for structural variants\n    IMPRECISE: {\n      Number: 0,\n      Type: 'Flag',\n      Description: 'Imprecise structural variation' },\n\n    NOVEL: {\n      Number: 0,\n      Type: 'Flag',\n      Description: 'Indicates a novel structural variation' },\n\n    // For precise variants, END is POS + length of REF allele - 1,\n    // and the for imprecise variants the corresponding best estimate.\n    SVTYPE: {\n      Number: 1,\n      Type: 'String',\n      Description: 'Type of structural variant' },\n\n    // Value should be one of DEL, INS, DUP, INV, CNV, BND. This key can\n    // be derived from the REF/ALT fields but is useful for filtering.\n    SVLEN: {\n      Number: null,\n      Type: 'Integer',\n      Description: 'Difference in length between REF and ALT alleles' },\n\n    // One value for each ALT allele. Longer ALT alleles (e.g. insertions)\n    // have positive values, shorter ALT alleles (e.g. deletions)\n    // have negative values.\n    CIPOS: {\n      Number: 2,\n      Type: 'Integer',\n      Description: 'Confidence interval around POS for imprecise variants' },\n\n    CIEND: {\n      Number: 2,\n      Type: 'Integer',\n      Description: 'Confidence interval around END for imprecise variants' },\n\n    HOMLEN: {\n      Type: 'Integer',\n      Description:\n      'Length of base pair identical micro-homology at event breakpoints' },\n\n    HOMSEQ: {\n      Type: 'String',\n      Description:\n      'Sequence of base pair identical micro-homology at event breakpoints' },\n\n    BKPTID: {\n      Type: 'String',\n      Description: 'ID of the assembled alternate allele in the assembly file' },\n\n    // For precise variants, the consensus sequence the alternate allele assembly\n    // is derivable from the REF and ALT fields. However, the alternate allele\n    // assembly file may contain additional information about the characteristics\n    // of the alt allele contigs.\n    MEINFO: {\n      Number: 4,\n      Type: 'String',\n      Description: 'Mobile element info of the form NAME,START,END,POLARITY' },\n\n    METRANS: {\n      Number: 4,\n      Type: 'String',\n      Description:\n      'Mobile element transduction info of the form CHR,START,END,POLARITY' },\n\n    DGVID: {\n      Number: 1,\n      Type: 'String',\n      Description: 'ID of this element in Database of Genomic Variation' },\n\n    DBVARID: {\n      Number: 1,\n      Type: 'String',\n      Description: 'ID of this element in DBVAR' },\n\n    DBRIPID: {\n      Number: 1,\n      Type: 'String',\n      Description: 'ID of this element in DBRIP' },\n\n    MATEID: {\n      Number: null,\n      Type: 'String',\n      Description: 'ID of mate breakends' },\n\n    PARID: {\n      Number: 1,\n      Type: 'String',\n      Description: 'ID of partner breakend' },\n\n    EVENT: {\n      Number: 1,\n      Type: 'String',\n      Description: 'ID of event associated to breakend' },\n\n    CILEN: {\n      Number: 2,\n      Type: 'Integer',\n      Description:\n      'Confidence interval around the inserted material between breakend' },\n\n    DPADJ: { Type: 'Integer', Description: 'Read Depth of adjacency' },\n    CN: {\n      Number: 1,\n      Type: 'Integer',\n      Description: 'Copy number of segment containing breakend' },\n\n    CNADJ: {\n      Number: null,\n      Type: 'Integer',\n      Description: 'Copy number of adjacency' },\n\n    CICN: {\n      Number: 2,\n      Type: 'Integer',\n      Description: 'Confidence interval around copy number for the segment' },\n\n    CICNADJ: {\n      Number: null,\n      Type: 'Integer',\n      Description: 'Confidence interval around copy number for the adjacency' } },\n\n\n\n  // FORMAT fields\n  GenotypeFields: {\n    // from the VCF4.3 spec, https://samtools.github.io/hts-specs/VCFv4.3.pdf\n    AD: {\n      Number: 'R',\n      Type: 'Integer',\n      Description: 'Read depth for each allele' },\n\n    ADF: {\n      Number: 'R',\n      Type: 'Integer',\n      Description: 'Read depth for each allele on the forward strand' },\n\n    ADR: {\n      Number: 'R',\n      Type: 'Integer',\n      Description: 'Read depth for each allele on the reverse strand' },\n\n    DP: {\n      Number: 1,\n      Type: 'Integer',\n      Description: 'Read depth' },\n\n    EC: {\n      Number: 'A',\n      Type: 'Integer',\n      Description: 'Expected alternate allele counts' },\n\n    FT: {\n      Number: 1,\n      Type: 'String',\n      Description: 'Filter indicating if this genotype was \"called\"' },\n\n    GL: {\n      Number: 'G',\n      Type: 'Float',\n      Description: 'Genotype likelihoods' },\n\n    GP: {\n      Number: 'G',\n      Type: 'Float',\n      Description: 'Genotype posterior probabilities' },\n\n    GQ: {\n      Number: 1,\n      Type: 'Integer',\n      Description: 'Conditional genotype quality' },\n\n    GT: {\n      Number: 1,\n      Type: 'String',\n      Description: 'Genotype' },\n\n    HQ: {\n      Number: 2,\n      Type: 'Integer',\n      Description: 'Haplotype quality' },\n\n    MQ: {\n      Number: 1,\n      Type: 'Integer',\n      Description: 'RMS mapping quality' },\n\n    PL: {\n      Number: 'G',\n      Type: 'Integer',\n      Description:\n      'Phred-scaled genotype likelihoods rounded to the closest integer' },\n\n    PQ: {\n      Number: 1,\n      Type: 'Integer',\n      Description: 'Phasing quality' },\n\n    PS: {\n      Number: 1,\n      Type: 'Integer',\n      Description: 'Phase set' } },\n\n\n\n  // ALT fields\n  AltTypes: {\n    DEL: {\n      Description: 'Deletion relative to the reference' },\n\n    INS: {\n      Description: 'Insertion of novel sequence relative to the reference' },\n\n    DUP: {\n      Description: 'Region of elevated copy number relative to the reference' },\n\n    INV: {\n      Description: 'Inversion of reference sequence' },\n\n    CNV: {\n      Description:\n      'Copy number variable region (may be both deletion and duplication)' },\n\n    'DUP:TANDEM': {\n      Description: 'Tandem duplication' },\n\n    'DEL:ME': {\n      Description: 'Deletion of mobile element relative to the reference' },\n\n    'INS:ME': {\n      Description: 'Insertion of a mobile element relative to the reference' },\n\n    NON_REF: {\n      Description:\n      'Represents any possible alternative allele at this location' },\n\n    '*': {\n      Description:\n      'Represents any possible alternative allele at this location' } },\n\n\n\n  // FILTER fields\n  FilterTypes: {\n    PASS: {\n      Description: 'Passed all filters' } } };exports.default = _default;"],"sourceRoot":""}