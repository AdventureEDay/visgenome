{"version":3,"sources":["../../../plugins/variants/src/VcfTabixAdapter/VcfTabixAdapter.ts","../../../node_modules/@gmod/vcf/dist/index.js","../../../node_modules/@gmod/vcf/dist/parse.js","../../../node_modules/@gmod/vcf/dist/vcfReserved.js"],"names":["configured","this","vcfGzLocation","readConfObject","config","location","indexType","filehandle","openLocation","isCSI","vcf","TabixIndexedFile","csiFilehandle","undefined","tbiFilehandle","chunkCacheSize","chunkSizeLimit","getHeader","then","header","parser","VcfParser","catch","e","opts","configure","getReferenceSequenceNames","a","getMetadata","query","ObservableCreate","observer","refName","start","end","getLines","lineCallback","line","fileOffset","next","VcfFeature","variant","parseLine","id","complete","signal","regions","superGetFeaturesInMultipleRegions","bytesForRegions","bytes","stat","pct","Math","round","size","console","warn","call","subscribe","Promise","all","map","region","index","blocksForRange","blockResults","byteRanges","forEach","blocks","block","minv","blockPosition","maxv","find","range","min","max","push","reduce","b","BaseFeatureDataAdapter","VCF","require","module","exports","_interopRequireDefault","_slicedToArray2","_classCallCheck2","_createClass2","_vcfReserved","Breakend","default","key","value","char","MateDirection","Join","concat","MatePosition","Replacement","args","_this","length","Error","headerLines","split","filter","strict","metadata","JSON","parse","stringify","INFO","InfoFields","FORMAT","GenotypeFields","ALT","AltTypes","FILTER","FilterTypes","startsWith","_parseMetadata","fields","thisHeader","slice","correctHeader","every","samples","_line$trim$match$slic","trim","match","_line$trim$match$slic2","metaKey","metaVal","_this$_parseStructure","_parseStructuredMetaVal","_this$_parseStructure2","keyVals","_parseKeyValue","replace","ID","Number","isNaN","filteredMetadata","_len","arguments","Array","_key","i","str","pairSeparator","data","currKey","currValue","state","_this2","currChar","currField","substr","rest","CHROM","POS","REF","QUAL","parseFloat","info","Object","keys","items","val","itemType","SVTYPE","_parseBreakend","bind","that","defineProperty","Variant","prototype","get","_parseGenotypes","stuff","assign","breakendString","tokens","parsed","includes","tok","formatKeys","_this3","genotypes","sample","formatValue","formatIndex","thisValue","valueType","AA","Type","Description","AC","AD","ADF","ADR","AF","AN","BQ","CIGAR","DB","DP","END","H2","H3","MQ","MQ0","NS","SB","SOMATIC","VALIDATED","IMPRECISE","NOVEL","SVLEN","CIPOS","CIEND","HOMLEN","HOMSEQ","BKPTID","MEINFO","METRANS","DGVID","DBVARID","DBRIPID","MATEID","PARID","EVENT","CILEN","DPADJ","CN","CNADJ","CICN","CICNADJ","EC","FT","GL","GP","GQ","GT","HQ","PL","PQ","PS","DEL","INS","DUP","INV","CNV","NON_REF","PASS"],"mappings":"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","file":"static/js/24.a0acbdf3.chunk.js","sourcesContent":["import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport {\n  FileLocation,\n  NoAssemblyRegion,\n  Region,\n} from '@jbrowse/core/util/types'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { Feature } from '@jbrowse/core/util/simpleFeature'\nimport { TabixIndexedFile } from '@gmod/tabix'\nimport { GenericFilehandle } from 'generic-filehandle'\nimport VcfParser from '@gmod/vcf'\nimport { Observer } from 'rxjs'\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport VcfFeature from './VcfFeature'\n\nexport default class extends BaseFeatureDataAdapter {\n  protected configured?: Promise<{\n    vcf: TabixIndexedFile\n    parser: typeof VcfParser\n    filehandle: GenericFilehandle\n  }>\n\n  protected async configure() {\n    if (!this.configured) {\n      const vcfGzLocation = readConfObject(this.config, 'vcfGzLocation')\n      const location = readConfObject(this.config, ['index', 'location'])\n      const indexType = readConfObject(this.config, ['index', 'indexType'])\n\n      const filehandle = openLocation(vcfGzLocation as FileLocation)\n      const isCSI = indexType === 'CSI'\n      const vcf = new TabixIndexedFile({\n        filehandle,\n        csiFilehandle: isCSI ? openLocation(location) : undefined,\n        tbiFilehandle: !isCSI ? openLocation(location) : undefined,\n        chunkCacheSize: 50 * 2 ** 20,\n        chunkSizeLimit: 1000000000,\n      })\n\n      this.configured = vcf\n        .getHeader()\n        .then(header => ({\n          filehandle,\n          vcf,\n          parser: new VcfParser({ header }),\n        }))\n        .catch(e => {\n          this.configured = undefined\n          throw e\n        })\n    }\n    return this.configured\n  }\n\n  public async getRefNames(opts: BaseOptions = {}) {\n    const { vcf } = await this.configure()\n    return vcf.getReferenceSequenceNames(opts)\n  }\n\n  async getHeader() {\n    const { vcf } = await this.configure()\n    return vcf.getHeader()\n  }\n\n  async getMetadata() {\n    const { parser } = await this.configure()\n    return parser.getMetadata()\n  }\n\n  public getFeatures(query: NoAssemblyRegion, opts: BaseOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      const { refName, start, end } = query\n      const { vcf, parser } = await this.configure()\n      await vcf.getLines(refName, start, end, {\n        lineCallback: (line: string, fileOffset: number) => {\n          observer.next(\n            new VcfFeature({\n              variant: parser.parseLine(line),\n              parser,\n              id: `${this.id}-vcf-${fileOffset}`,\n            }),\n          )\n        },\n        ...opts,\n      })\n      observer.complete()\n    }, opts.signal)\n  }\n\n  /**\n   * Checks if the data source has data for the given reference sequence,\n   * and then gets the features in the region if it does\n   *\n   * Currently this just calls getFeatureInRegion for each region. Adapters that\n   * are frequently called on multiple regions simultaneously may want to\n   * implement a more efficient custom version of this method.\n   *\n   * Also includes a bit of extra logging to warn when fetching a large portion\n   * of a VCF\n   * @param regions - Regions\n   * @param opts - Feature adapter options\n   * @returns Observable of Feature objects in the regions\n   */\n  public getFeaturesInMultipleRegions(\n    regions: Region[],\n    opts: BaseOptions = {},\n  ) {\n    // TODO: restore commented version below once TSDX supports Rollup v2\n    // xref: https://github.com/rollup/rollup/blob/master/CHANGELOG.md#bug-fixes-45\n    const superGetFeaturesInMultipleRegions = super.getFeaturesInMultipleRegions\n    return ObservableCreate<Feature>(async (observer: Observer<Feature>) => {\n      const bytes = await this.bytesForRegions(regions)\n      const { filehandle } = await this.configure()\n      const stat = await filehandle.stat()\n      let pct = Math.round((bytes / stat.size) * 100)\n      if (pct > 100) {\n        // this is just a bad estimate, make 100% if it goes over\n        pct = 100\n      }\n      if (pct > 60) {\n        console.warn(\n          `getFeaturesInMultipleRegions fetching ${pct}% of VCF file, but whole-file streaming not yet implemented`,\n        )\n      }\n      superGetFeaturesInMultipleRegions\n        .call(this, regions, opts)\n        .subscribe(observer)\n      // super.getFeaturesInMultipleRegions(regions, opts).subscribe(observer)\n    })\n  }\n\n  /**\n   * get the approximate number of bytes queried from the file for the given\n   * query regions\n   * @param regions - list of query regions\n   */\n  private async bytesForRegions(regions: Region[]) {\n    const { vcf } = await this.configure()\n    const blockResults = await Promise.all(\n      regions.map(region =>\n        // @ts-ignore\n        vcf.index.blocksForRange(region.refName, region.start, region.end),\n      ),\n    )\n    interface ByteRange {\n      start: number\n      end: number\n    }\n    interface VirtualOffset {\n      blockPosition: number\n    }\n    interface Block {\n      minv: VirtualOffset\n      maxv: VirtualOffset\n    }\n    const byteRanges: ByteRange[] = []\n    blockResults.forEach((blocks: Block[]) => {\n      blocks.forEach(block => {\n        const start = block.minv.blockPosition\n        const end = block.maxv.blockPosition + 64000\n        if (\n          !byteRanges.find(range => {\n            if (range.start <= end && range.end >= start) {\n              range.start = Math.min(range.start, start)\n              range.end = Math.max(range.end, end)\n              return true\n            }\n            return false\n          })\n        ) {\n          byteRanges.push({ start, end })\n        }\n      })\n    })\n\n    return byteRanges.reduce((a, b) => a + b.end - b.start + 1, 0)\n  }\n\n  public freeResources(/* { region } */): void {}\n}\n","\"use strict\"; /** @module VCF */\nvar VCF = require('./parse');\n\nmodule.exports = VCF;","\"use strict\";var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");var _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));var _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _vcfReserved = _interopRequireDefault(require(\"./vcfReserved\"));var\n\nBreakend = /*#__PURE__*/function () {function Breakend() {(0, _classCallCheck2.default)(this, Breakend);}(0, _createClass2.default)(Breakend, [{ key: \"toString\", value: function toString()\n    {\n      var char = this.MateDirection === 'left' ? ']' : '[';\n      if (this.Join === 'left') {\n        return \"\".concat(char).concat(this.MatePosition).concat(char).concat(this.Replacement);\n      }\n      return \"\".concat(this.Replacement).concat(char).concat(this.MatePosition).concat(char);\n    } }]);return Breakend;}();\n\n\n/**\n                                * Class representing a VCF parser, instantiated with the VCF header.\n                                * @param {object} args\n                                * @param {string} args.header - The VCF header. Supports both LF and CRLF\n                                * newlines.\n                                * @param {boolean} args.strict - Whether to parse in strict mode or not (default true)\n                                */var\nVCF = /*#__PURE__*/function () {\n  function VCF(args) {var _this = this;(0, _classCallCheck2.default)(this, VCF);\n    if (!args || !args.header || !args.header.length) {\n      throw new Error('empty header received');\n    }\n    var headerLines = args.header.split(/[\\r\\n]+/).filter(function (line) {return line;});\n    if (!headerLines.length) {\n      throw new Error('no non-empty header lines specified');\n    }\n\n    // allow access to the Breakend class in case anybody wants to use it for checking\n    this.Breakend = Breakend;\n    this.strict = args.strict !== undefined ? args.strict : true; // true by default\n    this.metadata = JSON.parse(\n    JSON.stringify({\n      INFO: _vcfReserved.default.InfoFields,\n      FORMAT: _vcfReserved.default.GenotypeFields,\n      ALT: _vcfReserved.default.AltTypes,\n      FILTER: _vcfReserved.default.FilterTypes }));\n\n\n    headerLines.forEach(function (line) {\n      if (!line.startsWith('#')) {\n        throw new Error(\"Bad line in header:\\n\".concat(line));\n      }\n      if (line.startsWith('##')) {\n        _this._parseMetadata(line);\n      } else if (line) {\n        var fields = line.split('\\t');\n        var thisHeader = fields.slice(0, 8);\n        var correctHeader = [\n        '#CHROM',\n        'POS',\n        'ID',\n        'REF',\n        'ALT',\n        'QUAL',\n        'FILTER',\n        'INFO'];\n\n        if (fields.length < 8) {\n          throw new Error(\"VCF header missing columns:\\n\".concat(line));\n        } else if (fields.length === 9) {\n          throw new Error(\"VCF header has FORMAT but no samples:\\n\".concat(line));\n        } else if (\n        thisHeader.length !== correctHeader.length ||\n        !thisHeader.every(function (value, index) {return value === correctHeader[index];}))\n        {\n          throw new Error(\"VCF column headers not correct:\\n\".concat(line));\n        }\n        _this.samples = fields.slice(9);\n      }\n    });\n    if (!this.samples) throw new Error('VCF does not have a header line');\n  }\n\n  /**\n     * Parse a VCF metadata line (i.e. a line that starts with \"##\") and add its\n     * properties to the object.\n     * @param {string} line - A line from the VCF. Supports both LF and CRLF\n     * newlines.\n     */(0, _createClass2.default)(VCF, [{ key: \"_parseMetadata\", value: function _parseMetadata(\n    line) {var _line$trim$match$slic =\n      line.\n      trim().\n      match(/^##(.+?)=(.*)/).\n      slice(1, 3),_line$trim$match$slic2 = (0, _slicedToArray2.default)(_line$trim$match$slic, 2),metaKey = _line$trim$match$slic2[0],metaVal = _line$trim$match$slic2[1];\n      if (metaVal.startsWith('<')) {\n        if (!(metaKey in this.metadata)) {\n          this.metadata[metaKey] = {};\n        }var _this$_parseStructure =\n        this._parseStructuredMetaVal(metaVal),_this$_parseStructure2 = (0, _slicedToArray2.default)(_this$_parseStructure, 2),id = _this$_parseStructure2[0],keyVals = _this$_parseStructure2[1];\n        this.metadata[metaKey][id] = keyVals;\n      } else {\n        this.metadata[metaKey] = metaVal;\n      }\n    }\n\n    /**\n       * Parse a VCF header structured meta string (i.e. a meta value that starts\n       * with \"<ID=...\")\n       * @param {string} metaVal - The VCF metadata value\n       *\n       * @returns {Array} - Array with two entries, 1) a string of the metadata ID\n       * and 2) an object with the other key-value pairs in the metadata\n       */ }, { key: \"_parseStructuredMetaVal\", value: function _parseStructuredMetaVal(\n    metaVal) {\n      var keyVals = this._parseKeyValue(metaVal.replace(/^<|>$/g, ''), ',');\n      var id = keyVals.ID;\n      delete keyVals.ID;\n      if ('Number' in keyVals) {\n        if (!Number.isNaN(Number(keyVals.Number))) {\n          keyVals.Number = Number(keyVals.Number);\n        }\n      }\n      return [id, keyVals];\n    }\n\n    /**\n       * Get metadata filtered by the elements in args. For example, can pass\n       * ('INFO', 'DP') to only get info on an metadata tag that was like\n       * \"##INFO=<ID=DP,...>\"\n       * @param  {...string} args - List of metadata filter strings.\n       *\n       * @returns {any} An object, string, or number, depending on the filtering\n       */ }, { key: \"getMetadata\", value: function getMetadata()\n    {\n      var filteredMetadata = this.metadata;for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}\n      for (var i = 0; i < args.length; i += 1) {\n        filteredMetadata = filteredMetadata[args[i]];\n        if (!filteredMetadata) return filteredMetadata;\n      }\n      return filteredMetadata;\n    }\n\n    /**\n       * Sometimes VCFs have key-value strings that allow the separator within\n       * the value if it's in quotes, like:\n       * 'ID=DB,Number=0,Type=Flag,Description=\"dbSNP membership, build 129\"'\n       *\n       * Parse this at a low level since we can't just split at \",\" (or whatever\n       * separator). Above line would be parsed to:\n       * {ID: 'DB', Number: '0', Type: 'Flag', Description: 'dbSNP membership, build 129'}\n       * @param {string} str - Key-value pairs in a string\n       * @param {string} [pairSeparator] - A string that separates sets of key-value\n       * pairs\n       *\n       * @returns {object} An object containing the key-value pairs\n       */ }, { key: \"_parseKeyValue\", value: function _parseKeyValue(\n    str) {var pairSeparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ';';\n      var data = {};\n      var currKey = '';\n      var currValue = '';\n      var state = 1; // states: 1: read key to = or pair sep, 2: read value to sep or quote, 3: read value to quote\n      for (var i = 0; i < str.length; i += 1) {\n        if (state === 1) {\n          // read key to = or pair sep\n          if (str[i] === '=') {\n            state = 2;\n          } else if (str[i] !== pairSeparator) {\n            currKey += str[i];\n          } else if (currValue === '') {\n            data[currKey] = null;\n            currKey = '';\n          }\n        } else if (state === 2) {\n          // read value to pair sep or quote\n          if (str[i] === pairSeparator) {\n            data[currKey] = currValue;\n            currKey = '';\n            currValue = '';\n            state = 1;\n          } else if (str[i] === '\"') {\n            state = 3;\n          } else currValue += str[i];\n        } else if (state === 3) {\n          // read value to quote\n          if (str[i] !== '\"') currValue += str[i];else\n          state = 2;\n        }\n      }\n      if (state === 2 || state === 3) {\n        data[currKey] = currValue;\n      } else if (state === 1) {\n        data[currKey] = null;\n      }\n      return data;\n    }\n\n    /**\n       * Parse a VCF line into an object like { CHROM POS ID REF ALT QUAL FILTER\n       * INFO } with SAMPLES optionally included if present in the VCF\n       * @param {string} line - A string of a line from a VCF. Supports both LF and\n       * CRLF newlines.\n       */ }, { key: \"parseLine\", value: function parseLine(\n    line) {var _this2 = this;\n      // eslint-disable-next-line no-param-reassign\n      line = line.trim();\n      if (!line.length) return undefined;\n      var currChar = 0;\n      for (var currField = 0; currChar < line.length; currChar += 1) {\n        if (line[currChar] === '\\t') {\n          currField += 1;\n        }\n        if (currField === 9) {\n          // reached genotypes, rest of fields are evaluated lazily\n          break;\n        }\n      }\n      var fields = line.substr(0, currChar).split('\\t');\n      var rest = line.substr(currChar + 1);\n      var variant = {\n        CHROM: fields[0],\n        POS: Number(fields[1]),\n        ID: fields[2] === '.' ? null : fields[2].split(';'),\n        REF: fields[3],\n        ALT: fields[4] === '.' ? null : fields[4].split(','),\n        QUAL: fields[5] === '.' ? null : parseFloat(fields[5]) };\n\n      if (fields[6] === '.') {\n        variant.FILTER = null;\n      } else if (fields[6] === 'PASS') {\n        variant.FILTER = 'PASS';\n      } else {\n        variant.FILTER = fields[6].split(';');\n      }\n      if (this.strict && fields[7] === undefined) {\n        throw new Error(\n        \"no INFO field specified, must contain at least a '.' (turn off strict mode to allow)\");\n\n      }\n      var info =\n      fields[7] === undefined || fields[7] === '.' ?\n      {} :\n      this._parseKeyValue(fields[7]);\n      Object.keys(info).forEach(function (key) {\n        var items;\n        if (info[key]) {\n          items = info[key].split(',');\n          items = items.map(function (val) {return val === '.' ? null : val;});\n        } else items = info[key];\n        var itemType = _this2.getMetadata('INFO', key, 'Type');\n        if (itemType) {\n          if (itemType === 'Integer' || itemType === 'Float') {\n            items = items.map(function (val) {\n              if (val === null) return null;\n              return Number(val);\n            });\n          } else if (itemType === 'Flag') {\n            if (info[key])\n              // eslint-disable-next-line no-console\n              console.warn(\"Info field \".concat(\n              key, \" is a Flag and should not have a value (got value \").concat(info[key], \")\"));else\n\n            items = true;\n          }\n        }\n        info[key] = items;\n      });\n      variant.INFO = info;\n\n      // if this has SVTYPE=BND, parse ALTS for breakend descriptions\n      if (variant.ALT && info && info.SVTYPE && info.SVTYPE[0] === 'BND') {\n        variant.ALT = variant.ALT.map(this._parseBreakend.bind(this));\n      }\n\n      // This creates a closure that allows us to attach \"SAMPLES\" as a lazy\n      // attribute\n\n      function Variant(stuff) {\n        Object.assign(this, stuff);\n      }\n\n      var that = this;\n\n      Object.defineProperty(Variant.prototype, 'SAMPLES', {\n        get: function get() {\n          var samples = that._parseGenotypes(fields[8], rest);\n\n          Object.defineProperty(this, 'SAMPLES', {\n            value: samples });\n\n\n          return samples;\n        } });\n\n\n      return new Variant(variant);\n    } }, { key: \"_parseBreakend\", value: function _parseBreakend(\n\n    breakendString) {\n      var tokens = breakendString.split(/[[\\]]/);\n      if (tokens.length > 1) {\n        var parsed = new Breakend();\n        parsed.MateDirection = breakendString.includes('[') ? 'right' : 'left';\n        for (var i = 0; i < tokens.length; i += 1) {\n          var tok = tokens[i];\n          if (tok) {\n            if (tok.includes(':')) {\n              // this is the remote location\n              parsed.MatePosition = tok;\n              parsed.Join = parsed.Replacement ? 'right' : 'left';\n            } else {\n              // this is the local alteration\n              parsed.Replacement = tok;\n            }\n          }\n        }\n        return parsed;\n      }\n      // if there is not more than one token, there are no [ or ] characters,\n      // so just return it unmodified\n      return breakendString;\n    } }, { key: \"_parseGenotypes\", value: function _parseGenotypes(\n\n    formatKeys, rest) {var _this3 = this;\n      // eslint-disable-next-line no-param-reassign\n      rest = rest.split('\\t');\n      var genotypes = {};\n      // eslint-disable-next-line no-param-reassign\n      formatKeys = formatKeys && formatKeys.split(':');\n      this.samples.forEach(function (sample, index) {\n        genotypes[sample] = {};\n        formatKeys.forEach(function (key) {\n          genotypes[sample][key] = null;\n        });\n        rest[index].split(':').forEach(function (formatValue, formatIndex) {\n          var thisValue;\n          if (\n          formatValue === '' ||\n          formatValue === '.' ||\n          formatValue === undefined)\n          {\n            thisValue = null;\n          } else {\n            thisValue = formatValue.\n            split(',').\n            map(function (val) {return val === '.' ? null : val;});\n            var valueType = _this3.getMetadata(\n            'FORMAT',\n            formatKeys[formatIndex],\n            'Type');\n\n            if ((valueType === 'Integer' || valueType === 'Float') && thisValue) {\n              thisValue = thisValue.map(function (val) {\n                if (!val) return null;\n                return Number(val);\n              });\n            }\n          }\n          genotypes[sample][formatKeys[formatIndex]] = thisValue;\n        }, {});\n      });\n      return genotypes;\n    } }]);return VCF;}();\n\n\nmodule.exports = VCF;","\"use strict\";Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = {\n  // INFO fields\n  InfoFields: {\n    // from the VCF4.3 spec, https://samtools.github.io/hts-specs/VCFv4.3.pdf\n    AA: { Number: 1, Type: 'String', Description: 'Ancestral allele' },\n    AC: {\n      Number: 'A',\n      Type: 'Integer',\n      Description:\n      'Allele count in genotypes, for each ALT allele, in the same order as listed' },\n\n    AD: {\n      Number: 'R',\n      Type: 'Integer',\n      Description: 'Total read depth for each allele' },\n\n    ADF: {\n      Number: 'R',\n      Type: 'Integer',\n      Description: 'Read depth for each allele on the forward strand' },\n\n    ADR: {\n      Number: 'R',\n      Type: 'Integer',\n      Description: 'Read depth for each allele on the reverse strand' },\n\n    AF: {\n      Number: 'A',\n      Type: 'Float',\n      Description:\n      'Allele frequency for each ALT allele in the same order as listed (estimated from primary data, not called genotypes)' },\n\n    AN: {\n      Number: 1,\n      Type: 'Integer',\n      Description: 'Total number of alleles in called genotypes' },\n\n    BQ: {\n      Number: 1,\n      Type: 'Float',\n      Description: 'RMS base quality' },\n\n    CIGAR: {\n      Number: 1,\n      Type: 'Float',\n      Description:\n      'Cigar string describing how to align an alternate allele to the reference allele' },\n\n    DB: {\n      Number: 0,\n      Type: 'Flag',\n      Description: 'dbSNP membership' },\n\n    DP: {\n      Number: 1,\n      Type: 'Integer',\n      Description: 'combined depth across samples' },\n\n    END: {\n      Number: 1,\n      Type: 'Integer',\n      Description: 'End position (for use with symbolic alleles)' },\n\n    H2: {\n      Number: 0,\n      Type: 'Flag',\n      Description: 'HapMap2 membership' },\n\n    H3: {\n      Number: 0,\n      Type: 'Flag',\n      Description: 'HapMap3 membership' },\n\n    MQ: {\n      Number: 1,\n      Type: null,\n      Description: 'RMS mapping quality' },\n\n    MQ0: {\n      Number: 1,\n      Type: 'Integer',\n      Description: 'Number of MAPQ == 0 reads' },\n\n    NS: {\n      Number: 1,\n      Type: 'Integer',\n      Description: 'Number of samples with data' },\n\n    SB: {\n      Number: 4,\n      Type: 'Integer',\n      Description: 'Strand bias' },\n\n    SOMATIC: {\n      Number: 0,\n      Type: 'Flag',\n      Description: 'Somatic mutation (for cancer genomics)' },\n\n    VALIDATED: {\n      Number: 0,\n      Type: 'Flag',\n      Description: 'Validated by follow-up experiment' },\n\n    '1000G': {\n      Number: 0,\n      Type: 'Flag',\n      Description: '1000 Genomes membership' },\n\n    // specifically for structural variants\n    IMPRECISE: {\n      Number: 0,\n      Type: 'Flag',\n      Description: 'Imprecise structural variation' },\n\n    NOVEL: {\n      Number: 0,\n      Type: 'Flag',\n      Description: 'Indicates a novel structural variation' },\n\n    // For precise variants, END is POS + length of REF allele - 1,\n    // and the for imprecise variants the corresponding best estimate.\n    SVTYPE: {\n      Number: 1,\n      Type: 'String',\n      Description: 'Type of structural variant' },\n\n    // Value should be one of DEL, INS, DUP, INV, CNV, BND. This key can\n    // be derived from the REF/ALT fields but is useful for filtering.\n    SVLEN: {\n      Number: null,\n      Type: 'Integer',\n      Description: 'Difference in length between REF and ALT alleles' },\n\n    // One value for each ALT allele. Longer ALT alleles (e.g. insertions)\n    // have positive values, shorter ALT alleles (e.g. deletions)\n    // have negative values.\n    CIPOS: {\n      Number: 2,\n      Type: 'Integer',\n      Description: 'Confidence interval around POS for imprecise variants' },\n\n    CIEND: {\n      Number: 2,\n      Type: 'Integer',\n      Description: 'Confidence interval around END for imprecise variants' },\n\n    HOMLEN: {\n      Type: 'Integer',\n      Description:\n      'Length of base pair identical micro-homology at event breakpoints' },\n\n    HOMSEQ: {\n      Type: 'String',\n      Description:\n      'Sequence of base pair identical micro-homology at event breakpoints' },\n\n    BKPTID: {\n      Type: 'String',\n      Description: 'ID of the assembled alternate allele in the assembly file' },\n\n    // For precise variants, the consensus sequence the alternate allele assembly\n    // is derivable from the REF and ALT fields. However, the alternate allele\n    // assembly file may contain additional information about the characteristics\n    // of the alt allele contigs.\n    MEINFO: {\n      Number: 4,\n      Type: 'String',\n      Description: 'Mobile element info of the form NAME,START,END,POLARITY' },\n\n    METRANS: {\n      Number: 4,\n      Type: 'String',\n      Description:\n      'Mobile element transduction info of the form CHR,START,END,POLARITY' },\n\n    DGVID: {\n      Number: 1,\n      Type: 'String',\n      Description: 'ID of this element in Database of Genomic Variation' },\n\n    DBVARID: {\n      Number: 1,\n      Type: 'String',\n      Description: 'ID of this element in DBVAR' },\n\n    DBRIPID: {\n      Number: 1,\n      Type: 'String',\n      Description: 'ID of this element in DBRIP' },\n\n    MATEID: {\n      Number: null,\n      Type: 'String',\n      Description: 'ID of mate breakends' },\n\n    PARID: {\n      Number: 1,\n      Type: 'String',\n      Description: 'ID of partner breakend' },\n\n    EVENT: {\n      Number: 1,\n      Type: 'String',\n      Description: 'ID of event associated to breakend' },\n\n    CILEN: {\n      Number: 2,\n      Type: 'Integer',\n      Description:\n      'Confidence interval around the inserted material between breakend' },\n\n    DPADJ: { Type: 'Integer', Description: 'Read Depth of adjacency' },\n    CN: {\n      Number: 1,\n      Type: 'Integer',\n      Description: 'Copy number of segment containing breakend' },\n\n    CNADJ: {\n      Number: null,\n      Type: 'Integer',\n      Description: 'Copy number of adjacency' },\n\n    CICN: {\n      Number: 2,\n      Type: 'Integer',\n      Description: 'Confidence interval around copy number for the segment' },\n\n    CICNADJ: {\n      Number: null,\n      Type: 'Integer',\n      Description: 'Confidence interval around copy number for the adjacency' } },\n\n\n\n  // FORMAT fields\n  GenotypeFields: {\n    // from the VCF4.3 spec, https://samtools.github.io/hts-specs/VCFv4.3.pdf\n    AD: {\n      Number: 'R',\n      Type: 'Integer',\n      Description: 'Read depth for each allele' },\n\n    ADF: {\n      Number: 'R',\n      Type: 'Integer',\n      Description: 'Read depth for each allele on the forward strand' },\n\n    ADR: {\n      Number: 'R',\n      Type: 'Integer',\n      Description: 'Read depth for each allele on the reverse strand' },\n\n    DP: {\n      Number: 1,\n      Type: 'Integer',\n      Description: 'Read depth' },\n\n    EC: {\n      Number: 'A',\n      Type: 'Integer',\n      Description: 'Expected alternate allele counts' },\n\n    FT: {\n      Number: 1,\n      Type: 'String',\n      Description: 'Filter indicating if this genotype was \"called\"' },\n\n    GL: {\n      Number: 'G',\n      Type: 'Float',\n      Description: 'Genotype likelihoods' },\n\n    GP: {\n      Number: 'G',\n      Type: 'Float',\n      Description: 'Genotype posterior probabilities' },\n\n    GQ: {\n      Number: 1,\n      Type: 'Integer',\n      Description: 'Conditional genotype quality' },\n\n    GT: {\n      Number: 1,\n      Type: 'String',\n      Description: 'Genotype' },\n\n    HQ: {\n      Number: 2,\n      Type: 'Integer',\n      Description: 'Haplotype quality' },\n\n    MQ: {\n      Number: 1,\n      Type: 'Integer',\n      Description: 'RMS mapping quality' },\n\n    PL: {\n      Number: 'G',\n      Type: 'Integer',\n      Description:\n      'Phred-scaled genotype likelihoods rounded to the closest integer' },\n\n    PQ: {\n      Number: 1,\n      Type: 'Integer',\n      Description: 'Phasing quality' },\n\n    PS: {\n      Number: 1,\n      Type: 'Integer',\n      Description: 'Phase set' } },\n\n\n\n  // ALT fields\n  AltTypes: {\n    DEL: {\n      Description: 'Deletion relative to the reference' },\n\n    INS: {\n      Description: 'Insertion of novel sequence relative to the reference' },\n\n    DUP: {\n      Description: 'Region of elevated copy number relative to the reference' },\n\n    INV: {\n      Description: 'Inversion of reference sequence' },\n\n    CNV: {\n      Description:\n      'Copy number variable region (may be both deletion and duplication)' },\n\n    'DUP:TANDEM': {\n      Description: 'Tandem duplication' },\n\n    'DEL:ME': {\n      Description: 'Deletion of mobile element relative to the reference' },\n\n    'INS:ME': {\n      Description: 'Insertion of a mobile element relative to the reference' },\n\n    NON_REF: {\n      Description:\n      'Represents any possible alternative allele at this location' },\n\n    '*': {\n      Description:\n      'Represents any possible alternative allele at this location' } },\n\n\n\n  // FILTER fields\n  FilterTypes: {\n    PASS: {\n      Description: 'Passed all filters' } } };exports.default = _default;"],"sourceRoot":""}