{"version":3,"sources":["../../../plugins/data-management/src/AddTrackWidget/components/ConfirmTrack.tsx","../../../plugins/data-management/src/AddTrackWidget/components/TrackSourceSelect.tsx","../../../plugins/data-management/src/AddTrackWidget/components/AddTrackWidget.tsx"],"names":["useStyles","makeStyles","theme","spacing","marginBottom","StatusMessage","trackAdapter","trackType","classes","type","Typography","className","subadapter","UnknownAdapterPrompt","model","session","getSession","adapterHint","Link","href","target","rel","TextField","value","label","helperText","select","fullWidth","onChange","event","setAdapterHint","SelectProps","SelectDisplayProps","getEnv","pluginManager","getElementTypesInGroup","filter","elt","name","map","MenuItem","key","observer","trackName","assembly","warningMessage","unsupported","UNKNOWN","style","color","setTrackName","inputProps","setTrackType","setAssembly","assemblies","assemblyConf","assemblyName","readConfObject","root","display","flexDirection","paper","padding","TrackSourceSelect","Paper","description","location","trackData","setLocation","setTrackData","indexTrackData","setIndexTrackData","marginTop","stepper","backgroundColor","palette","background","default","button","marginRight","actionsContainer","stepContent","margin","steps","useState","activeStep","setActiveStep","handleNext","length","trackId","toLowerCase","replace","Date","now","adminMode","assemblyInstance","assemblyManager","get","addTrackConf","assemblyNames","adapter","sequenceAdapter","getConf","view","showTrack","notify","clearData","hideWidget","handleBack","isNextDisabled","Stepper","orientation","idx","Step","StepLabel","StepContent","step","getStepContent","Button","disabled","onClick","variant","data-testid"],"mappings":"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","file":"static/js/55.a0e7ab96.chunk.js","sourcesContent":["import { readConfObject } from '@jbrowse/core/configuration'\nimport { getSession } from '@jbrowse/core/util'\nimport Link from '@material-ui/core/Link'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport { makeStyles } from '@material-ui/core/styles'\nimport TextField from '@material-ui/core/TextField'\nimport Typography from '@material-ui/core/Typography'\nimport { observer } from 'mobx-react'\nimport { getEnv } from 'mobx-state-tree'\nimport React from 'react'\nimport { UNKNOWN } from '@jbrowse/core/util/tracks'\nimport { AddTrackModel } from '../model'\n\nconst useStyles = makeStyles(theme => ({\n  spacing: {\n    marginBottom: theme.spacing(3),\n  },\n}))\n\nfunction StatusMessage({\n  trackAdapter,\n  trackType,\n}: {\n  trackAdapter: { type: string; subadapter?: { type: string } }\n  trackType: string\n}) {\n  const classes = useStyles()\n  return trackAdapter.type === 'SNPCoverageAdapter' ? (\n    <Typography className={classes.spacing}>\n      Selected <code>{trackType}</code>. Using adapter{' '}\n      <code>{trackAdapter.type}</code> with subadapter{' '}\n      <code>{trackAdapter.subadapter?.type}</code>. Please enter a track name\n      and, if necessary, update the track type.\n    </Typography>\n  ) : (\n    <Typography className={classes.spacing}>\n      Using adapter <code>{trackAdapter.type}</code> and guessing track type{' '}\n      <code>{trackType}</code>. Please enter a track name and, if necessary,\n      update the track type.\n    </Typography>\n  )\n}\n\nfunction UnknownAdapterPrompt({ model }: { model: AddTrackModel }) {\n  const classes = useStyles()\n  const session = getSession(model)\n  const { adapterHint } = model\n  return (\n    <>\n      <Typography className={classes.spacing}>\n        Was not able to guess the adapter type for this data, but it may be in\n        the list below. If not, you can{' '}\n        <Link\n          href=\"https://github.com/GMOD/jbrowse-components/releases\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          check for new releases\n        </Link>{' '}\n        of JBrowse to see if they support this data type or{' '}\n        <Link\n          href=\"https://github.com/GMOD/jbrowse-components/issues/new\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          file an issue\n        </Link>{' '}\n        and add a feature request for this data type.\n      </Typography>\n      <TextField\n        className={classes.spacing}\n        value={adapterHint}\n        label=\"adapterType\"\n        helperText=\"An adapter type\"\n        select\n        fullWidth\n        onChange={event => {\n          model.setAdapterHint(event.target.value)\n        }}\n        SelectProps={{\n          // @ts-ignore\n          SelectDisplayProps: { 'data-testid': 'adapterTypeSelect' },\n        }}\n      >\n        {getEnv(session)\n          .pluginManager.getElementTypesInGroup('adapter')\n          // Exclude SNPCoverageAdapter from primary adapter user selection\n          .filter((elt: { name: string }) => elt.name !== 'SNPCoverageAdapter')\n          .map((elt: { name: string }) => (\n            <MenuItem key={elt.name} value={elt.name}>\n              {elt.name}\n            </MenuItem>\n          ))}\n      </TextField>\n    </>\n  )\n}\n\nfunction ConfirmTrack({ model }: { model: AddTrackModel }) {\n  const classes = useStyles()\n  const session = getSession(model)\n  const { trackName, trackAdapter, trackType, assembly, warningMessage } = model\n\n  if (model.unsupported) {\n    return (\n      <Typography className={classes.spacing}>\n        This version of JBrowse cannot display data of this type. It is\n        possible, however, that there is a newer version that can display them.\n        You can{' '}\n        <Link\n          href=\"https://github.com/GMOD/jbrowse-components/releases\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          check for new releases\n        </Link>{' '}\n        of JBrowse or{' '}\n        <Link\n          href=\"https://github.com/GMOD/jbrowse-components/issues/new\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          file an issue\n        </Link>{' '}\n        and add a feature request for this data type.\n      </Typography>\n    )\n  }\n  if (trackAdapter?.type === UNKNOWN) {\n    return <UnknownAdapterPrompt model={model} />\n  }\n\n  if (!trackAdapter?.type) {\n    return <Typography>Could not recognize this data type.</Typography>\n  }\n\n  return (\n    <>\n      {trackAdapter ? (\n        <StatusMessage trackAdapter={trackAdapter} trackType={trackType} />\n      ) : null}\n      {warningMessage ? (\n        <Typography style={{ color: 'orange' }}>{warningMessage}</Typography>\n      ) : null}\n      <TextField\n        className={classes.spacing}\n        label=\"trackName\"\n        helperText=\"A name for this track\"\n        fullWidth\n        value={trackName}\n        onChange={event => model.setTrackName(event.target.value)}\n        inputProps={{ 'data-testid': 'trackNameInput' }}\n      />\n      <TextField\n        className={classes.spacing}\n        value={trackType}\n        label=\"trackType\"\n        helperText=\"A track type\"\n        select\n        fullWidth\n        onChange={event => {\n          model.setTrackType(event.target.value)\n        }}\n        SelectProps={{\n          // @ts-ignore\n          SelectDisplayProps: { 'data-testid': 'trackTypeSelect' },\n        }}\n      >\n        {getEnv(session)\n          .pluginManager.getElementTypesInGroup('track')\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          .map(({ name }: any) => (\n            <MenuItem key={name} value={name}>\n              {name}\n            </MenuItem>\n          ))}\n      </TextField>\n      <TextField\n        value={assembly}\n        label=\"assemblyName\"\n        helperText=\"Assembly to which the track will be added\"\n        select\n        fullWidth\n        onChange={event => {\n          model.setAssembly(event.target.value)\n        }}\n        SelectProps={{\n          // @ts-ignore\n          SelectDisplayProps: { 'data-testid': 'assemblyNameSelect' },\n        }}\n      >\n        {session.assemblies.map(assemblyConf => {\n          const assemblyName = readConfObject(assemblyConf, 'name')\n          return (\n            <MenuItem key={assemblyName} value={assemblyName}>\n              {assemblyName}\n            </MenuItem>\n          )\n        })}\n      </TextField>\n    </>\n  )\n}\n\nexport default observer(ConfirmTrack)\n","import { FileSelector } from '@jbrowse/core/ui'\nimport Paper from '@material-ui/core/Paper'\nimport { makeStyles } from '@material-ui/core/styles'\nimport React from 'react'\nimport { AddTrackModel } from '../model'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  paper: {\n    padding: theme.spacing(1),\n  },\n}))\n\nfunction TrackSourceSelect({ model }: { model: AddTrackModel }) {\n  const classes = useStyles()\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <FileSelector\n          name=\"Main file\"\n          description=\"\"\n          location={model.trackData}\n          setLocation={model.setTrackData}\n        />\n        <FileSelector\n          name=\"Index file\"\n          description=\"Automatically inferred from the URL if not supplied\"\n          location={model.indexTrackData}\n          setLocation={model.setIndexTrackData}\n        />\n      </Paper>\n    </div>\n  )\n}\n\nexport default TrackSourceSelect\n","import React, { useState } from 'react'\nimport {\n  Button,\n  Step,\n  StepContent,\n  StepLabel,\n  Stepper,\n  Typography,\n  makeStyles,\n} from '@material-ui/core'\nimport { getSession } from '@jbrowse/core/util'\nimport { getConf } from '@jbrowse/core/configuration'\nimport { observer } from 'mobx-react'\nimport ConfirmTrack from './ConfirmTrack'\nimport TrackSourceSelect from './TrackSourceSelect'\nimport { AddTrackModel } from '../model'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginTop: theme.spacing(1),\n  },\n  stepper: {\n    backgroundColor: theme.palette.background.default,\n  },\n  button: {\n    marginTop: theme.spacing(1),\n    marginRight: theme.spacing(1),\n  },\n  actionsContainer: {\n    marginBottom: theme.spacing(2),\n  },\n  stepContent: {\n    margin: theme.spacing(1),\n  },\n}))\n\nconst steps = ['Enter track data', 'Confirm track type']\n\nfunction AddTrackWidget({ model }: { model: AddTrackModel }) {\n  const [activeStep, setActiveStep] = useState(0)\n  const classes = useStyles()\n  const session = getSession(model)\n  const { assembly, trackAdapter, trackData, trackName, trackType } = model\n\n  function getStepContent(step: number) {\n    switch (step) {\n      case 0:\n        return <TrackSourceSelect model={model} />\n      case 1:\n        return <ConfirmTrack model={model} />\n      default:\n        return <Typography>Unknown step</Typography>\n    }\n  }\n\n  function handleNext() {\n    if (activeStep !== steps.length - 1) {\n      setActiveStep(activeStep + 1)\n      return\n    }\n\n    const trackId = `${trackName\n      .toLowerCase()\n      .replace(/ /g, '_')}-${Date.now()}${\n      session.adminMode ? '' : '-sessionTrack'\n    }`\n\n    const assemblyInstance = session.assemblyManager.get(assembly)\n\n    // @ts-ignore\n    session.addTrackConf({\n      trackId,\n      type: trackType,\n      name: trackName,\n      assemblyNames: [assembly],\n      adapter: {\n        ...trackAdapter,\n        sequenceAdapter: getConf(assemblyInstance, ['sequence', 'adapter']),\n      },\n    })\n    if (model.view) {\n      model.view.showTrack(trackId)\n    } else {\n      session.notify(\n        'Open a new view, or use the track selector in an existing view, to view this track',\n        'info',\n      )\n    }\n    model.clearData()\n    // @ts-ignore\n    session.hideWidget(model)\n  }\n\n  function handleBack() {\n    setActiveStep(activeStep - 1)\n  }\n\n  function isNextDisabled() {\n    switch (activeStep) {\n      case 0:\n        return !trackData\n      case 1:\n        return !(trackName && trackType && trackAdapter?.type && assembly)\n      default:\n        return true\n    }\n  }\n\n  return (\n    <div className={classes.root}>\n      <Stepper\n        className={classes.stepper}\n        activeStep={activeStep}\n        orientation=\"vertical\"\n      >\n        {steps.map((label, idx) => (\n          <Step key={label}>\n            <StepLabel>{label}</StepLabel>\n            <StepContent>\n              {getStepContent(idx)}\n              <div className={classes.actionsContainer}>\n                <Button\n                  disabled={activeStep === 0}\n                  onClick={handleBack}\n                  className={classes.button}\n                >\n                  Back\n                </Button>\n                <Button\n                  disabled={isNextDisabled()}\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={handleNext}\n                  className={classes.button}\n                  data-testid=\"addTrackNextButton\"\n                >\n                  {activeStep === steps.length - 1 ? 'Add' : 'Next'}\n                </Button>\n              </div>\n            </StepContent>\n          </Step>\n        ))}\n      </Stepper>\n    </div>\n  )\n}\n\nexport default observer(AddTrackWidget)\n"],"sourceRoot":""}